{
	"Flamework Controller": {
		"prefix":[ "controller", "flameworkcontroller"],
		"description": "Create a Flamework controller",
		"body": [
			"import { Controller, OnStart, OnInit } from \"@flamework/core\";",
			"",
			"@Controller({})",
			"export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} implements OnStart, OnInit {",
				"\tonInit() {",
					"\t\t$2",
				"\t}",
				"",
				"\tonStart() {",
					"\t\t$0",
				"\t}",
			"}",
			""
		]
	},

	"Flamework Service": {
		"prefix":[ "service", "flameworkservice"],
		"description": "Create a Flamework service",
		"body": [
			"import { Service, OnStart, OnInit } from \"@flamework/core\";",
			"",
			"@Service({})",
			"export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} implements OnStart, OnInit {",
				"\tonInit() {",
					"\t\t$2",
				"\t}",
				"",
				"\tonStart() {",
					"\t\t$0",
				"\t}",
			"}",
			""
		]
	},

	"Flamework Replicated Component": {
		"prefix":[ "replicatedcomponent", "flameworkreplicatedcomponent"],
		"description": "Create a Flamework component on ReplicatedStorage",
		"body": [
			"import { OnStart } from \"@flamework/core\";",
			"import { Component, BaseComponent } from \"@flamework/components\";",
			"import { Players, RunService } from \"@rbxts/services\";",
			"import { Janitor } from \"@rbxts/janitor\";",
			"",
			"interface Attributes {}",
			"",
			"@Component({",
				"\ttag: \"${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}\",",
			"})",
			"export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends BaseComponent<Attributes> implements OnStart {",
				"\tPlayer = Players.LocalPlayer;",
				"\tObliterator = new Janitor<{ Instances: Instance }>();",
				"",
				"\t// Start of Client & Server Side",
				"\tonStart() {",
					"\t\tif (RunService.IsServer()) {",
					"\t\t\tthis.onServerStart();",
					"\t\t} else {",
					"\t\t\tthis.onClientStart();",
					"\t\t}",
					"",
					"\t\tthis.instance.Destroying.Connect(this.onDestroying);",
				"\t}",
				"",
				"\tonDestroying = (): void => {",
				"\t\tthis.Obliterator.Cleanup();",
				"\t};",
				"\t// End of Client & Server Side",
				"",
				"\t// Start of Server Side",
				"\tonServerStart = (): void => {};",
				"\t// End of Server Side",
				"",
				"\t// Start of Client Side",
				"\tonClientStart = (): void => {};",
				"\t// End of Client Side",
			"}",
			""
		]
	},

	"Flamework Component": {
		"prefix":[ "component", "flameworkcomponent"],
		"description": "Create a Flamework component",
		"body": [
			"import { OnStart } from \"@flamework/core\";",
			"import { Component, BaseComponent } from \"@flamework/components\";",
			"import { Players } from \"@rbxts/services\";",
			"import { Janitor } from \"@rbxts/janitor\";",
			"",
			"interface Attributes {}",
			"",
			"@Component({",
				"\ttag: \"${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}\",",
			"})",
			"export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends BaseComponent<Attributes> implements OnStart {",
				"\tPlayer = Players.LocalPlayer;",
				"\tObliterator = new Janitor<{ Instances: Instance }>();",
				"",
				"\t// Start of Component",
				"\tonStart() {",
					"\t\t// Do code here",
					"",
					"\t\tthis.instance.Destroying.Connect(this.onDestroying);",
				"\t}",
				"",
				"\tonDestroying = (): void => {",
				"\t\tthis.Obliterator.Cleanup();",
				"\t};",
				"\t// End of Component",
			"}",
			""
		]
	},
}
